# GitHub Actions을 사용하여 AWS EC2 서버에 Java Spring Boot 애플리케이션을 자동으로 배포하는 워크플로우를 정의
name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Java 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'corretto'
          cache: 'gradle'

      - name: Build
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_KEY: ${{ secrets.EC2_KEY }}
        run: |
          # 1. SSH 키 설정 및 권한 부여
          echo "$EC2_KEY" > key.pem
          chmod 600 key.pem
          
          # 2. 빌드된 JAR 파일 이름 찾기 (***수정됨: -plain.jar 파일을 제외하고 찾습니다***)
          JAR_FILE=$(find ./build/libs -name "*.jar" -not -name "*-plain.jar" | head -n 1)

          # 3. JAR 파일을 접속 사용자 홈 디렉토리에 임시 복사 (~/new_app.jar)
          scp -i key.pem -o StrictHostKeyChecking=no "${JAR_FILE}" ${EC2_USER}@${EC2_HOST}:~/new_app.jar
          
          # 4. SSH로 접속하여 모든 원격 작업 수행 (파일 이동 및 서비스 재시작 통합)
          ssh -i key.pem -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} << 'EOF'
            # 최종 목적지 디렉토리를 sudo 권한으로 생성 (에러 방지)
            sudo mkdir -p /home/ec2-user/app
          
            # 임시 파일(~/)을 최종 위치(/home/ec2-user/app/)로 이동 및 이름 변경
            sudo mv ~/new_app.jar /home/ec2-user/app/myapp.jar
          
            # Spring Boot 서비스 재시작 (통합)
            sudo systemctl restart spring-api
          EOF
          
          # 5. 보안을 위해 SSH 키 파일 삭제
          rm -f key.pem